{:exit 0, :out "['perm', ['chase', ['R', 'S']]]\n{'dinst': 'itemSearch', 'sinst': 'goAndSearch', 'y': 'intStartItemSearch', 'vars2': {'R': 'Agent', 'S': 'ObjectName'}, 'x': ['perm', ['chase', ['R', 'S']]], 'vars1': {'R': 'Agent', 'S': 'ObjectName'}, 'cond': ['and', ['role', ['R', 'hero']], ['object', ['S', 'macguffin']]], 'df': [['perm', ['chase', ['R', 'S']]]], 'sf': ['intStartItemSearch', []], 'rl': [['intStartItemSearch', []], [['perm', ['chase', ['R', 'S']]]], ['and', ['role', ['R', 'hero']], ['object', ['S', 'macguffin']]]], 'xinitiates': [[['intStartItemSearch', []], [['perm', ['chase', ['R', 'S']]]], ['and', ['role', ['R', 'hero']], ['object', ['S', 'macguffin']]]], [['intStartItemSearch', []], [['phase', ['itemSearch', 'active']]], []]], 'self': <instal.compiler.newcompiler.instaliabcompiler.InstalBridgeCompiler object at 0x7f01e1c78e48>}\n['phase', ['itemSearch', 'active']]\n{'dinst': 'itemSearch', 'sinst': 'goAndSearch', 'y': 'intStartItemSearch', 'vars2': {}, 'x': ['phase', ['itemSearch', 'active']], 'vars1': {}, 'cond': [], 'df': [['phase', ['itemSearch', 'active']]], 'sf': ['intStartItemSearch', []], 'rl': [['intStartItemSearch', []], [['phase', ['itemSearch', 'active']]], []], 'xinitiates': [[['intStartItemSearch', []], [['perm', ['chase', ['R', 'S']]]], ['and', ['role', ['R', 'hero']], ['object', ['S', 'macguffin']]]], [['intStartItemSearch', []], [['phase', ['itemSearch', 'active']]], []]], 'self': <instal.compiler.newcompiler.instaliabcompiler.InstalBridgeCompiler object at 0x7f01e1c78e48>, 'k': 'S'}\n%\n% Rules for Bridge goAndSearchItemSearch\n%\n  ifluent(live(goAndSearchItemSearch), goAndSearchItemSearch).\n  fluent(live(goAndSearchItemSearch), goAndSearchItemSearch).\n  bridge(goAndSearchItemSearch).\n  sink(itemSearch, goAndSearchItemSearch).\n  source(goAndSearch, goAndSearchItemSearch). \n  :- not _preludeLoaded. \n\nfluent(ipow(goAndSearch,phase(Trope,Phase),itemSearch), goAndSearchItemSearch) :- \n    inst(goAndSearch), source(goAndSearch, goAndSearchItemSearch), inst(itemSearch), sink(itemSearch, goAndSearchItemSearch), bridge(goAndSearchItemSearch), \n\n   trope(Trope),\n   phase(Phase),\n    fluent(phase(Trope,Phase), itemSearch).\nifluent(ipow(goAndSearch,phase(Trope,Phase),itemSearch), goAndSearchItemSearch) :- \n    inst(goAndSearch), source(goAndSearch, goAndSearchItemSearch), inst(itemSearch), sink(itemSearch, goAndSearchItemSearch), bridge(goAndSearchItemSearch), \n\n   trope(Trope),\n   phase(Phase),\n    fluent(phase(Trope,Phase), itemSearch).\nfluent(ipow(goAndSearch,perm(chase(Agent,ObjectName)),itemSearch), goAndSearchItemSearch) :- \n    inst(goAndSearch), source(goAndSearch, goAndSearchItemSearch), inst(itemSearch), sink(itemSearch, goAndSearchItemSearch), bridge(goAndSearchItemSearch), \n\n   agent(Agent),\n   objectname(ObjectName),\n    fluent(perm(chase(Agent,ObjectName)), itemSearch).\nifluent(ipow(goAndSearch,perm(chase(Agent,ObjectName)),itemSearch), goAndSearchItemSearch) :- \n    inst(goAndSearch), source(goAndSearch, goAndSearchItemSearch), inst(itemSearch), sink(itemSearch, goAndSearchItemSearch), bridge(goAndSearchItemSearch), \n\n   agent(Agent),\n   objectname(ObjectName),\n    fluent(perm(chase(Agent,ObjectName)), itemSearch).\n%\n% cross generate rules\n%\n%\n% cross initiation rules\n%\n%\n% Translation of intStartItemSearch of goAndSearch xinitiates ['perm', ['chase', ['R', 'S']]] of itemSearch if ['and', ['role', ['R', 'hero']], ['object', ['S', 'macguffin']]]\n%\nxinitiated(goAndSearch, perm(chase(R,S)),itemSearch,I) :-\n   occurred(intStartItemSearch,goAndSearch,I),\n   holdsat(ipow(goAndSearch, perm(chase(R,S)), itemSearch), goAndSearchItemSearch, I), \n   holdsat(live(goAndSearchItemSearch),goAndSearchItemSearch,I), bridge(goAndSearchItemSearch), \n   inst(itemSearch), inst(goAndSearch), \n   holdsat(role(R,hero),None,I),\n   holdsat(object(S,macguffin),None,I),\n   agent(R),\n   objectname(S),\n   bridge(goAndSearchItemSearch), instant(I).\n%\n% Translation of intStartItemSearch of goAndSearch xinitiates ['phase', ['itemSearch', 'active']] of itemSearch if []\n%\nxinitiated(goAndSearch, phase(itemSearch,active),itemSearch,I) :-\n   occurred(intStartItemSearch,goAndSearch,I),\n   holdsat(ipow(goAndSearch, phase(itemSearch,active), itemSearch), goAndSearchItemSearch, I), \n   holdsat(live(goAndSearchItemSearch),goAndSearchItemSearch,I), bridge(goAndSearchItemSearch), \n   inst(itemSearch), inst(goAndSearch), \n   bridge(goAndSearchItemSearch), instant(I).\n%\n% cross termination rules\n%\n%\n% initially\n%\n% no creation event\nholdsat(live(goAndSearchItemSearch),goAndSearchItemSearch,I) :- start(I), bridge(goAndSearchItemSearch).\nholdsat(perm(null),goAndSearchItemSearch,I) :- start(I), bridge(goAndSearchItemSearch).\n% initially: ipow(goAndSearch,perm(chase(R,S)),itemSearch)\nholdsat(ipow(goAndSearch,perm(chase(R,S)),itemSearch),goAndSearchItemSearch,I) :- not holdsat(live(goAndSearchItemSearch),goAndSearchItemSearch),\n   agent(R),\n   objectname(S),\n   bridge(goAndSearchItemSearch), source(goAndSearch, goAndSearchItemSearch), sink(itemSearch, goAndSearchItemSearch), start(I).\n% initially: ipow(goAndSearch,phase(itemSearch,active),itemSearch)\nholdsat(ipow(goAndSearch,phase(itemSearch,active),itemSearch),goAndSearchItemSearch,I) :- not holdsat(live(goAndSearchItemSearch),goAndSearchItemSearch),\n   bridge(goAndSearchItemSearch), source(goAndSearch, goAndSearchItemSearch), sink(itemSearch, goAndSearchItemSearch), start(I).\n\nThere are 49 answer sets\n", :err ""}